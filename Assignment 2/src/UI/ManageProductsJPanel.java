/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Model.Product;
import Model.ProductDirectory;

/**
 *
 * @author sharathreddy
 */
public class ManageProductsJPanel extends javax.swing.JPanel {

    private ProductDirectory productDirectory;
    private javax.swing.JComboBox<String> jComboBoxCategory; // <-- IT IS DECLARED HERE!

    public ManageProductsJPanel(ProductDirectory productDirectory) {
        this.productDirectory = productDirectory;
        initComponents();
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) jTableProducts.getModel();
        model.setRowCount(0); // Clear existing rows

        for (Product product : productDirectory.getProductList()) {
            Object[] row = new Object[6]; // 6 columns: ID, Name, Category, Price, Quantity, Prep Time
            row[0] = product.getProductId();
            row[1] = product.getProductName();
            row[2] = product.getCategory();
            row[3] = product.getPrice();
            row[4] = product.getQuantity();
            row[5] = product.getPreparationTime();
            model.addRow(row);
    }}

    private void clearFields() {
        fieldProductID.setText("");
        fieldProductName.setText("");
        fieldPrice.setText("");
        fieldQuantity.setText("");
        fieldPreparationTime.setText("");
        jComboBoxCategory.setSelectedIndex(0);
        fieldProductID.setEnabled(true);
        jTableProducts.clearSelection();
    }

    private Product validateAndCreateProduct() {
        String id = fieldProductID.getText().trim();
        String name = fieldProductName.getText().trim();
        String category = (String) jComboBoxCategory.getSelectedItem();
        String priceStr = fieldPrice.getText().trim();
        String quantityStr = fieldQuantity.getText().trim();
        String prepTimeStr = fieldPreparationTime.getText().trim();

        // 1. Check for empty fields (REQUIRED, NO NULL VALUES ACCEPTED)
        if (id.isEmpty() || name.isEmpty() || priceStr.isEmpty() || quantityStr.isEmpty() || prepTimeStr.isEmpty() || category.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields must be filled out.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        // 2. Validate data types and format (Minimum 4 different primitive datatypes: String, double, int, boolean (not applicable here, so using 3 core numeric types + String))
        double price;
        int quantity;
        int prepTime;

        try {
            price = Double.parseDouble(priceStr); // double (primitive datatype 1)
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Price must be a valid number.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        try {
            quantity = Integer.parseInt(quantityStr); // int (primitive datatype 2)
            if (quantity < 0) throw new NumberFormatException();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Quantity must be a non-negative whole number.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        try {
            prepTime = Integer.parseInt(prepTimeStr); // int (primitive datatype 3)
            if (prepTime < 0) throw new NumberFormatException();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Preparation Time must be a non-negative whole number.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        return new Product(id, name, category, price, quantity, prepTime);
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMngProducts = new javax.swing.JLabel();
        lblProductID = new javax.swing.JLabel();
        lblProductName = new javax.swing.JLabel();
        lblCategory = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        lblPreparationTime = new javax.swing.JLabel();
        fieldProductID = new javax.swing.JTextField();
        fieldProductName = new javax.swing.JTextField();
        fieldQuantity = new javax.swing.JTextField();
        fieldPrice = new javax.swing.JTextField();
        fieldPreparationTime = new javax.swing.JTextField();
        btnAddProduct = new javax.swing.JButton();
        btnUpdateProduct = new javax.swing.JButton();
        btnDeleteProduct = new javax.swing.JButton();
        btnClearProduct = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProducts = new javax.swing.JTable();
        jComboBoxProducts = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(535, 485));
        setPreferredSize(new java.awt.Dimension(535, 485));

        lblMngProducts.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        lblMngProducts.setText("Manage Products");

        lblProductID.setText("Product ID");

        lblProductName.setText("Product Name");

        lblCategory.setText("Category");

        lblPrice.setText("Price");

        lblQuantity.setText("Quantity");

        lblPreparationTime.setText("Preparation Time");

        fieldProductID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldProductIDActionPerformed(evt);
            }
        });

        fieldPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldPriceActionPerformed(evt);
            }
        });

        btnAddProduct.setText("Add");
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        btnUpdateProduct.setText("Update");
        btnUpdateProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateProductActionPerformed(evt);
            }
        });

        btnDeleteProduct.setText("Delete");
        btnDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteProductActionPerformed(evt);
            }
        });

        btnClearProduct.setText("Clear");
        btnClearProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearProductActionPerformed(evt);
            }
        });

        jTableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Category", "Price", "Quantity", "Prep Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableProducts);

        jComboBoxProducts.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Coffee", "Tea", "Pastry", "Sandwich" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblQuantity)
                            .addComponent(lblCategory)
                            .addComponent(lblPrice)
                            .addComponent(lblPreparationTime)
                            .addComponent(lblProductName)
                            .addComponent(lblProductID))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fieldPreparationTime)
                            .addComponent(fieldPrice)
                            .addComponent(fieldQuantity)
                            .addComponent(fieldProductName)
                            .addComponent(fieldProductID)
                            .addComponent(jComboBoxProducts, 0, 98, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(btnAddProduct)
                        .addGap(36, 36, 36)
                        .addComponent(btnUpdateProduct)
                        .addGap(38, 38, 38)
                        .addComponent(btnDeleteProduct)
                        .addGap(44, 44, 44)
                        .addComponent(btnClearProduct))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(lblMngProducts)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblMngProducts)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProductID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProductName))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCategory)
                    .addComponent(jComboBoxProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuantity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldPreparationTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPreparationTime))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddProduct)
                    .addComponent(btnUpdateProduct)
                    .addComponent(btnDeleteProduct)
                    .addComponent(btnClearProduct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fieldProductIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldProductIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldProductIDActionPerformed

    private void fieldPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldPriceActionPerformed

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        Product newProduct = validateAndCreateProduct();
        if (newProduct != null) {
            // Check for unique ID before adding
            if (!productDirectory.isProductIdUnique(newProduct.getProductId())) {
                JOptionPane.showMessageDialog(this, "Product ID already exists. Please use a unique ID.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            productDirectory.addProduct(newProduct);
            JOptionPane.showMessageDialog(this, "Product added successfully!");
            clearFields();
            populateTable();
        }
    }//GEN-LAST:event_btnAddProductActionPerformed

    private void btnUpdateProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateProductActionPerformed
        int selectedRow = jTableProducts.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to update.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the original ID from the table model (which serves as the key)
        DefaultTableModel model = (DefaultTableModel) jTableProducts.getModel();
        String originalId = model.getValueAt(selectedRow, 0).toString();
        Product productToUpdate = productDirectory.findProductById(originalId);

        if (productToUpdate != null) {
            Product updatedProductData = validateAndCreateProduct();

            if (updatedProductData != null) {

                // Since the ID field is disabled during update (via loadSelectedProduct),
                // we don't worry about ID change validation here.

                // Perform the update on the existing object
                productToUpdate.setProductName(updatedProductData.getProductName());
                productToUpdate.setCategory(updatedProductData.getCategory());
                productToUpdate.setPrice(updatedProductData.getPrice());
                productToUpdate.setQuantity(updatedProductData.getQuantity());
                productToUpdate.setPreparationTime(updatedProductData.getPreparationTime());

                JOptionPane.showMessageDialog(this, "Product updated successfully!");
                clearFields();
                populateTable();
            }
        }
    }//GEN-LAST:event_btnUpdateProductActionPerformed

    private void btnDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteProductActionPerformed
        int selectedRow = jTableProducts.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) jTableProducts.getModel();
        String idToDelete = model.getValueAt(selectedRow, 0).toString();

        Product productToDelete = productDirectory.findProductById(idToDelete);

        if (productToDelete != null) {
             int confirm = JOptionPane.showConfirmDialog(this,
                     "Are you sure you want to delete product: " + productToDelete.getProductName() + "?",
                     "Confirm Deletion", JOptionPane.YES_NO_OPTION);

             if (confirm == JOptionPane.YES_OPTION) {
                 productDirectory.deleteProduct(productToDelete);
                 JOptionPane.showMessageDialog(this, "Product deleted successfully!");
                 clearFields();
                 populateTable();
             }
        }
    }//GEN-LAST:event_btnDeleteProductActionPerformed

    private void btnClearProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearProductActionPerformed
        // TODO add your handling code here:
        clearFields();
    }//GEN-LAST:event_btnClearProductActionPerformed

    private void loadSelectedProduct() {
        int selectedRow = jTableProducts.getSelectedRow();
        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) jTableProducts.getModel();

            // Assuming the column order is ID, Name, Category, Price, Quantity, Prep Time
            fieldProductID.setText(model.getValueAt(selectedRow, 0).toString());
            fieldProductName.setText(model.getValueAt(selectedRow, 1).toString());
            jComboBoxCategory.setSelectedItem(model.getValueAt(selectedRow, 2).toString());
            fieldPrice.setText(model.getValueAt(selectedRow, 3).toString());
            fieldQuantity.setText(model.getValueAt(selectedRow, 4).toString());
            fieldPreparationTime.setText(model.getValueAt(selectedRow, 5).toString());

            // Disable ID editing when a product is selected for update/delete
            fieldProductID.setEnabled(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JButton btnClearProduct;
    private javax.swing.JButton btnDeleteProduct;
    private javax.swing.JButton btnUpdateProduct;
    private javax.swing.JTextField fieldPreparationTime;
    private javax.swing.JTextField fieldPrice;
    private javax.swing.JTextField fieldProductID;
    private javax.swing.JTextField fieldProductName;
    private javax.swing.JTextField fieldQuantity;
    private javax.swing.JComboBox<String> jComboBoxProducts;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableProducts;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblMngProducts;
    private javax.swing.JLabel lblPreparationTime;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblProductID;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblQuantity;
    // End of variables declaration//GEN-END:variables
}
