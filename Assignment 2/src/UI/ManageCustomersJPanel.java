/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import Model.Customer;
import Model.CustomerDirectory;

/**
 *
 * @author sharathreddy
 */
public class ManageCustomersJPanel extends javax.swing.JPanel {

    private CustomerDirectory customerDirectory;
    /**
     * Creates new form ManageCustomersJPanel
     */
    public ManageCustomersJPanel(CustomerDirectory customerDirectory) {
        this.customerDirectory = customerDirectory;
        initComponents();
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) jTableCustomers.getModel();
        model.setRowCount(0); // Clear existing rows

        for (Customer customer : customerDirectory.getCustomerList()) {
            Object[] row = new Object[4]; // 4 columns: Customer ID, First Name, Last Name, Contact
            row[0] = customer.getCustomerId();
            row[1] = customer.getFirstName();
            row[2] = customer.getLastName();
            row[3] = customer.getContact();
            model.addRow(row);
        }
    }

    /**
     * Clears all input fields.
     */
    private void clearFields() {
        fieldCustomerID.setText("");
        fieldFirstName.setText("");
        fieldLastName.setText("");
        fieldContact.setText("");
        jTableCustomers.clearSelection();
    }

    private Customer validateAndCreateCustomer() {
        String id = fieldCustomerID.getText().trim();
        String firstName = fieldFirstName.getText().trim();
        String lastName = fieldLastName.getText().trim();
        String contact = fieldContact.getText().trim();

        // 1. Check for empty fields (REQUIRED, NO NULL VALUES ACCEPTED)
        if (id.isEmpty() || firstName.isEmpty() || lastName.isEmpty() || contact.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields (ID, Name, Contact) must be filled out.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        // 2. Validate Contact (primitive datatype: String, but validated for format)
        // Simple validation: must be only digits and a reasonable length (e.g., 10 digits)
        if (!contact.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(this, "Contact must be exactly 10 digits.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        // 3. Validate ID (primitive datatype: String, validated for format)
        // Simple validation: ID must be only digits
         if (!id.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Customer ID must contain only digits.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        return new Customer(id, firstName, lastName, contact);
    }

    /**
     * Loads data from the selected table row into the input fields.
     */
    private void loadSelectedCustomer() {
        int selectedRow = jTableCustomers.getSelectedRow();
        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) jTableCustomers.getModel();

            // Assuming the column order is Customer ID, First Name, Last Name, Contact
            fieldCustomerID.setText(model.getValueAt(selectedRow, 0).toString());
            fieldFirstName.setText(model.getValueAt(selectedRow, 1).toString());
            fieldLastName.setText(model.getValueAt(selectedRow, 2).toString());
            fieldContact.setText(model.getValueAt(selectedRow, 3).toString());

            // Lock ID field when viewing/updating existing customer
            fieldCustomerID.setEnabled(false);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblManageCustomers = new javax.swing.JLabel();
        lblCustomerID = new javax.swing.JLabel();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        lblContact = new javax.swing.JLabel();
        fieldCustomerID = new javax.swing.JTextField();
        fieldFirstName = new javax.swing.JTextField();
        fieldLastName = new javax.swing.JTextField();
        fieldContact = new javax.swing.JTextField();
        btnAddCustomers = new javax.swing.JButton();
        btnUpdateCustomers = new javax.swing.JButton();
        btnDeleteCustomers = new javax.swing.JButton();
        btnClearCustomers = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCustomers = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        lblManageCustomers.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        lblManageCustomers.setText("Manage Customers");

        lblCustomerID.setText("Customer ID");

        lblFirstName.setText("First Name");

        lblLastName.setText("Last Name");

        lblContact.setText("Contact");

        fieldFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldFirstNameActionPerformed(evt);
            }
        });

        btnAddCustomers.setText("Add");
        btnAddCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCustomersActionPerformed(evt);
            }
        });

        btnUpdateCustomers.setText("Update");
        btnUpdateCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCustomersActionPerformed(evt);
            }
        });

        btnDeleteCustomers.setText("Delete");
        btnDeleteCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCustomersActionPerformed(evt);
            }
        });

        btnClearCustomers.setText("Clear");
        btnClearCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearCustomersActionPerformed(evt);
            }
        });

        jTableCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "First Name", "Last Name", "Contact"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableCustomers);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btnAddCustomers)
                        .addGap(36, 36, 36)
                        .addComponent(btnUpdateCustomers)
                        .addGap(47, 47, 47)
                        .addComponent(btnDeleteCustomers)
                        .addGap(46, 46, 46)
                        .addComponent(btnClearCustomers))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblFirstName)
                                    .addComponent(lblCustomerID)
                                    .addComponent(lblLastName)
                                    .addComponent(lblContact))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fieldCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldContact, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblManageCustomers))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblManageCustomers)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerID)
                    .addComponent(fieldCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(fieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContact)
                    .addComponent(fieldContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCustomers)
                    .addComponent(btnUpdateCustomers)
                    .addComponent(btnDeleteCustomers)
                    .addComponent(btnClearCustomers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fieldFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldFirstNameActionPerformed

    private void btnAddCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCustomersActionPerformed
        // TODO add your handling code here:
        Customer newCustomer = validateAndCreateCustomer();
        if (newCustomer != null) {
            // Check for unique ID before adding
            if (!customerDirectory.isCustomerIdUnique(newCustomer.getCustomerId())) {
                JOptionPane.showMessageDialog(this, "Customer ID already exists. Please use a unique ID.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            customerDirectory.addCustomer(newCustomer);
            JOptionPane.showMessageDialog(this, "Customer added successfully!");
            clearFields();
            fieldCustomerID.setEnabled(true); // Re-enable ID field for next entry
            populateTable();
        }
    }//GEN-LAST:event_btnAddCustomersActionPerformed

    private void btnUpdateCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCustomersActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableCustomers.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a customer from the table to update.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the original ID from the table (ID is the key)
        DefaultTableModel model = (DefaultTableModel) jTableCustomers.getModel();
        String originalId = model.getValueAt(selectedRow, 0).toString();
        Customer customerToUpdate = customerDirectory.findCustomerById(originalId);

        if (customerToUpdate != null) {
            // Validate new input values
            // We use the same validation method, but we ignore the uniqueness check
            // for the ID since we are updating the existing customer.
            String newFirstName = fieldFirstName.getText().trim();
            String newLastName = fieldLastName.getText().trim();
            String newContact = fieldContact.getText().trim();

            // Re-validate fields, excluding ID uniqueness check
            if (newFirstName.isEmpty() || newLastName.isEmpty() || newContact.isEmpty()) {
                JOptionPane.showMessageDialog(this, "All fields (Name, Contact) must be filled out.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!newContact.matches("\\d{10}")) {
                JOptionPane.showMessageDialog(this, "Contact must be exactly 10 digits.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Perform the update
            customerToUpdate.setFirstName(newFirstName);
            customerToUpdate.setLastName(newLastName);
            customerToUpdate.setContact(newContact);

            JOptionPane.showMessageDialog(this, "Customer updated successfully!");
            clearFields();
            fieldCustomerID.setEnabled(true);
            populateTable();
        }
    }//GEN-LAST:event_btnUpdateCustomersActionPerformed

    private void btnDeleteCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCustomersActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableCustomers.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Delete A CUSTOMER RECORD from the view panel table (5 points)
        DefaultTableModel model = (DefaultTableModel) jTableCustomers.getModel();
        String idToDelete = model.getValueAt(selectedRow, 0).toString();

        Customer customerToDelete = customerDirectory.findCustomerById(idToDelete);

        if (customerToDelete != null) {
             int confirm = JOptionPane.showConfirmDialog(this,
                     "Are you sure you want to delete customer: " + customerToDelete.getFirstName() + " " + customerToDelete.getLastName() + "?",
                     "Confirm Deletion", JOptionPane.YES_NO_OPTION);

             if (confirm == JOptionPane.YES_OPTION) {
                 customerDirectory.deleteCustomer(customerToDelete);
                 JOptionPane.showMessageDialog(this, "Customer record deleted successfully!");
                 clearFields();
                 fieldCustomerID.setEnabled(true);
                 populateTable();
             }
        }
    }//GEN-LAST:event_btnDeleteCustomersActionPerformed

    private void btnClearCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearCustomersActionPerformed
        // TODO add your handling code here:
        clearFields();
        fieldCustomerID.setEnabled(true); // Always re-enable ID field when clearing
    }//GEN-LAST:event_btnClearCustomersActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCustomers;
    private javax.swing.JButton btnClearCustomers;
    private javax.swing.JButton btnDeleteCustomers;
    private javax.swing.JButton btnUpdateCustomers;
    private javax.swing.JTextField fieldContact;
    private javax.swing.JTextField fieldCustomerID;
    private javax.swing.JTextField fieldFirstName;
    private javax.swing.JTextField fieldLastName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCustomers;
    private javax.swing.JLabel lblContact;
    private javax.swing.JLabel lblCustomerID;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblManageCustomers;
    // End of variables declaration//GEN-END:variables
}
